/*
 *  PowerPaint - TCSS 305 - Autumn 2013
 */

package support;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Action;
import javax.swing.JFrame;

import tools.ActionTool;

/**
 * Class that provides undo and redo storage and functionality.
 * 
 * @author Jesse Bostic
 * @version 11-13-2013
 */
public class Reverter {
    
    /**
     * List holds drawn objects in order of their being drawn.
     */
    private List<DrawnObject> myList;
    
    /**
     * The current index location in list of drawn objects.
     */
    private int myCurrent;
    
    /**
     * The frame with which this reverter is associated.
     */
    private JFrame myFrame;
    
    /**
     * Constructor for a basic reverter object.
     * 
     * @param the_frame the frame associate with this reverter
     */
    public Reverter(final JFrame the_frame) {
        myList = new ArrayList<DrawnObject>();
        myCurrent = 0;
        myFrame = the_frame;
    }
    
    /**
     * Adds drawnobject to list.
     * 
     * @param the_object drawn object to be added
     */
    public void add(final DrawnObject the_object) {
        myList = myList.subList(0, myCurrent); //prevent storing extra filters
        myList.add(the_object);
        myCurrent++;
    }
    
    /**
     * Gets this reverter's list up to current index.
     * 
     * @return copy of this reverter's list in current state
     */
    public List<DrawnObject> getList() {
        return myList.subList(0, myCurrent);
    }
    
    /**
     * Returns whether an undo operation is possible.
     * 
     * @return true if undo possible, false otherwise
     */
    public boolean isUndoable() {
        return myCurrent > 0;
    }
    
    /**
     * Returns whether a redo operation is possible.
     * 
     * @return true if redo possible, false otherwise
     */
    public boolean isRedoable() {
        return myCurrent < myList.size();
    }
    
    /**
     * Returns the undone drawnobject list.
     * 
     * @return undone list copy
     */
    public final List<DrawnObject> undo() {
        return undoRedo(-1);
    }
    
    /**
     * Returns the redone drawnobject list.
     * 
     * @return redone list copy
     */
    public final List<DrawnObject> redo() {
        return undoRedo(1);
    }
    
    /**
     * Reduces redundancy of the undo and redo operations, returning to those respective
     * methods the desired list state at appropriate index.
     * 
     * @param the_offset whether the index will be incremented (1) or decremented (-1)
     * @return modified copy of list after an undo or redo operation
     */
    private List<DrawnObject> undoRedo(final int the_offset) {
        if ((isRedoable() && the_offset > 0)             //double checks validity
                || (isUndoable() && the_offset < 0)) {   //of operation            
            myCurrent += the_offset;  
        }
        
        return myList.subList(0, myCurrent);
    }
    
    /**
     * Resets this reverter to initial state.
     */
    public void reset() {
        myList.clear();
        myCurrent = 0;
    }
    
    /**
     * Gets an undo action instance.
     * 
     * @return a new instance of undo action
     */
    public Action getUndoAction() {
        return new Undo();
    }
    
    /**
     * Gets a redo action instance.
     * 
     * @return a new instance of redo action
     */
    public Action getRedoAction() {
        return new Redo();
    }
    
    /**
     * Constructs and returns a string representation of this reverter.
     * 
     * @return string representation of this Reverter object.
     */
    public String toString() { 
        final StringBuilder strRep = new StringBuilder();
        strRep.append("Reverter(");
        for (DrawnObject d : myList) {
            strRep.append(d);
            strRep.append("\n\t");
        }
        strRep.append(")");
        strRep.append(" Current Index:");
        strRep.append(myCurrent);
        return strRep.toString();
    }
    
    /**
     * Class providing action functionality for undo operation.
     * 
     * @author Jesse Bostic
     * @version 11-13-2013
     */
    @SuppressWarnings("serial")
    private class Undo extends ActionTool {
        
        /**
         * Constructor for undo action.
         */
        public Undo() {
            super();
            this.setEnabled(isUndoable());
        }
        
        /**
         * The behavior of a button utilizing this action.
         * 
         * @param the_event event generated by button click
         */
        @Override
        public void actionPerformed(final ActionEvent the_event) {
            undo();
            this.setEnabled(isUndoable());
            myFrame.repaint();
        }

    }
    
    /**
     * Class providing action functionality for redo operation.
     * 
     * @author Jesse Bostic
     * @version 11-13-2013
     */
    @SuppressWarnings("serial")
    private class Redo extends ActionTool {
        
        /**
         * Constructor for redo action.
         */
        public Redo() {
            super();
            super.putValue(MNEMONIC_KEY, (int) 'D');
            this.setEnabled(isRedoable());
        }
        
        /**
         * The behavior of a button utilizing this action.
         * 
         * @param the_event event generated by button click
         */
        @Override
        public void actionPerformed(final ActionEvent the_event) {
            redo();
            this.setEnabled(isRedoable());
            myFrame.repaint();
        }
    }

}
